unit modulo;

{$mode ObjFPC}{$H+}

interface

uses
    Classes, SysUtils, comunicador, funcoes, def;

{ TDModulo }
type
    ThProcesso = class(TThread)
    private
        fdados: ansistring;
        ftempo: integer;
        fprocedimento: TRetorno;
        fArquivoLog:String;
        f_DModulo: Pointer;
        f_transmissaoID:String;


    protected
        procedure Execute; override;
    public
        constructor Create(VP_Suspenso: boolean;VP_Transmissao_ID,VP_ArquivoLog, VP_Dados: ansistring; VP_Procedimento: TRetorno; VP_DModulo: Pointer; VP_TempoAguarda: integer);

    end;



    TDModulo = class(TDataModule)
    private
        V_ModuloProcID: integer;
        F_ChaveTerminal: ansistring;
        V_Modulo_ID: integer;
        V_ArquivoLog: ansistring;
        V_DComunicador: TDComunicador;
        V_Modulo: Pointer;
    end;

function inicializar(VP_ModuloProcID: integer; var VO_Modulo: Pointer; VP_Recebimento: TRetorno; VP_Modulo_ID: integer;
    VP_ArquivoLog: PChar): integer; stdcall;
function finalizar(VP_Modulo: Pointer): integer; stdcall;
function login(VP_Modulo: Pointer; VP_Host: PChar; VP_Porta: integer; VP_ChaveTerminal: PChar): integer; stdcall;
function solicitacao(VP_Modulo: Pointer; VP_Dados: PChar; VP_Procedimento: TRetorno; VP_TempoAguarda: integer): integer; stdcall;
function solicitacaoblocante(VP_Modulo: Pointer; VP_Dados: PChar; var VO_Retorno: PChar; VP_TempoAguarda: integer): integer; stdcall;
function modulostatus(VP_Modulo: Pointer; var VO_Versao: PChar; var VO_VersaoMensagem: integer; var VO_StatusRetorno: integer): integer; stdcall;


implementation

{$R *.lfm}




constructor ThProcesso.Create(VP_Suspenso: boolean;VP_Transmissao_ID,VP_ArquivoLog, VP_Dados: ansistring; VP_Procedimento: TRetorno; VP_DModulo: Pointer; VP_TempoAguarda: integer);

begin
    FreeOnTerminate := True;
    fArquivoLog:=VP_ArquivoLog;
    fdados := VP_Dados;
    f_DModulo := VP_DModulo;
    ftempo := VP_TempoAguarda;
    fprocedimento := VP_Procedimento;
    f_transmissaoID:=VP_Transmissao_ID;
    inherited Create(VP_Suspenso);

end;

procedure ThProcesso.Execute;
var
    VL_MensagemIN,VL_MensagemOUT: TMensagem;
    VL_Erro: integer;
begin
    GravaLog(fArquivoLog, 0,'', 'modulo', 'inicio', fdados, '', 1);
    VL_MensagemOUT := TMensagem.Create;
    VL_MensagemIN := TMensagem.Create;
    try
        VL_Erro := VL_MensagemOUT.CarregaTags(fdados);
        if VL_Erro <> 0 then
        begin
            GravaLog(fArquivoLog, 0,'', 'modulo', '210520221957', 'Erro no carregamento da tag ', '', 1);
            fprocedimento(Pchar(f_transmissaoID), TDModulo(f_DModulo).V_ModuloProcID, VL_Erro, PChar(fdados));
            exit;
        end;

        VL_Erro := TDComunicador(TDModulo(f_DModulo).V_DComunicador).ClienteTransmiteSolicitacao(f_transmissaoID,VL_MensagemOUT, VL_MensagemIN, nil, ftempo);
        GravaLog(fArquivoLog, 0,'', 'modulo', '210520222054', VL_MensagemIN.TagsAsString, '', 1);
        VL_MensagemIN.AddTag('007B', TDModulo(f_DModulo).V_Modulo_ID);  //modulo_conf id

        fprocedimento(PChar(f_transmissaoID), TDModulo(f_DModulo).V_ModuloProcID, VL_Erro, PChar(VL_MensagemIN.TagsAsString));
    finally
        GravaLog(fArquivoLog, 0,'', 'modulo', 'fim', fdados, '', 1);
        VL_MensagemOUT.Free;
        VL_MensagemIN.Free;
    end;
end;

function inicializar(VP_ModuloProcID: integer; var VO_Modulo: Pointer; VP_Recebimento: TRetorno; VP_Modulo_ID: integer;
    VP_ArquivoLog: PChar): integer; stdcall;
begin
    try
        Result := 0;


        Pointer(VO_Modulo) := Pointer(TDModulo.Create(nil));
        TDModulo(VO_Modulo).V_Modulo := VO_Modulo;
        TDModulo(VO_Modulo).V_ModuloProcID := VP_ModuloProcID;
        TDModulo(VO_Modulo).V_Modulo_ID := VP_Modulo_ID;
        TDModulo(VO_Modulo).V_ArquivoLog := VP_ArquivoLog;
        TDModulo(VO_Modulo).V_DComunicador := TDComunicador.Create(nil);
        TDModulo(VO_Modulo).V_DComunicador.V_ProcID:=VP_ModuloProcID;
        TDModulo(VO_Modulo).V_DComunicador.V_ArquivoLog:=VP_ArquivoLog;
        TDModulo(VO_Modulo).V_DComunicador.V_ConexaoCliente := TTConexao.Create(@TDModulo(VO_Modulo).V_DComunicador);
        TDModulo(VO_Modulo).V_DComunicador.V_ThRecebeEscuta := TThRecebe.Create(True, @TDModulo(VO_Modulo).V_DComunicador, VP_ArquivoLog);
        TDModulo(VO_Modulo).V_DComunicador.V_ClienteRecebimento := VP_Recebimento;
        TDModulo(VO_Modulo).V_DComunicador.V_ThRecebeEscuta.Start;


    except
        Result := 54;
    end;

end;

function finalizar(VP_Modulo: Pointer): integer; stdcall;
var
    VL_ArquivoLog: string;
begin
    Result := 0;
    VL_ArquivoLog := TDModulo(VP_Modulo).V_ArquivoLog;
    try
        if Assigned(TDModulo(VP_Modulo).V_DComunicador.V_ThRecebeEscuta) then
        begin
            TDModulo(VP_Modulo).V_DComunicador.V_ThRecebeEscuta.Parar;
            TDModulo(VP_Modulo).V_DComunicador.V_ThRecebeEscuta.Terminate;
            TDModulo(VP_Modulo).V_DComunicador.V_ThRecebeEscuta.WaitFor;
        end;

        FreeAndNil(TDModulo(VP_Modulo).V_DComunicador);
        FreeAndNil(TDModulo(VP_Modulo));



    except
        on e: EInOutError do
            GravaLog(VL_ArquivoLog, 0, '', 'modulo', '190520221827', 'Erro na finalizacao do modulo finalizar() ' + e.ClassName + '/' + e.Message, '', 1);

    end;

end;

function login(VP_Modulo: Pointer; VP_Host: PChar; VP_Porta: integer; VP_ChaveTerminal: PChar): integer; stdcall;
var
    VL_MensagemIN,VL_MensagemOUT: TMensagem;
    VL_S: string;
    VL_DadosI: int64;
begin
    Result := 1;
    VL_S := '';

    VL_MensagemOUT := TMensagem.Create;
    VL_MensagemIN := TMensagem.Create;
    try

        if Length(VP_host) = 0 then
        begin
            Result := 9;
            exit;
        end;
        if VP_Porta < 1 then
        begin
            Result := 11;
            exit;
        end;
        if length(VP_ChaveTerminal) = 0 then
        begin
            Result := 15;
            exit;
        end;
        if ((TDModulo(VP_Modulo).V_DComunicador.V_ConexaoCliente.ServidorHost <> VP_Host) or
            (TDModulo(VP_Modulo).V_DComunicador.V_ConexaoCliente.ServidorPorta <> VP_Porta) or
            (TDModulo(VP_Modulo).F_ChaveTerminal <> VP_ChaveTerminal)) then
        begin
            TDModulo(VP_Modulo).V_DComunicador.DesconectarCliente;
            TDModulo(VP_Modulo).V_DComunicador.V_ConexaoCliente.ServidorHost := VP_Host;
            TDModulo(VP_Modulo).V_DComunicador.V_ConexaoCliente.ServidorPorta := VP_Porta;
            TDModulo(VP_Modulo).F_ChaveTerminal := VP_ChaveTerminal;

        end;


        Result := TDModulo(VP_Modulo).V_DComunicador.ConectarCliente;

        if Result <> 0 then
            Exit;

        if TDModulo(VP_Modulo).V_DComunicador.V_ConexaoCliente.Status = csLogado then
        begin
            Result := 0;
            Exit;
        end;

        if TDModulo(VP_Modulo).V_DComunicador.V_ConexaoCliente.Status = csChaveado then
        begin
            VL_MensagemOUT.Limpar;
            VL_MensagemOUT.AddComando('0001', '');
            VL_MensagemOUT.AddTag('0002', VP_ChaveTerminal);
            VL_MensagemOUT.AddTag('0005', IntToStr(C_versao[0]) + '.' + IntToStr(C_versao[1]) + '.' + IntToStr(C_versao[2]));
            VL_MensagemOUT.AddTag('0006', IntToStr(C_mensagem));
            VL_MensagemOUT.AddTag('0037', 'S');

            Result := TDModulo(VP_Modulo).V_DComunicador.ClienteTransmiteSolicitacao('',VL_MensagemOUT, VL_MensagemIN, nil, 10000);
            if Result <> 0 then
                Exit;
            VL_S := VL_MensagemIN.Comando;
            if VL_S = '0028' then
                TDModulo(VP_Modulo).V_DComunicador.V_ConexaoCliente.Status := csLogado
            else
            if VL_S = '0029' then
            begin
                VL_DadosI := 0;
                VL_MensagemIN.GetTag('0036', VL_DadosI);
                Result := VL_DadosI;
            end
            else
                Result := 34;

        end;

    finally
        VL_MensagemIN.Free;
        VL_MensagemOUT.Free;
    end;

end;



function solicitacao(VP_Modulo: Pointer; VP_Dados: PChar; VP_Procedimento: TRetorno; VP_TempoAguarda: integer): integer; stdcall;
var
    VL_Th: ThProcesso;
begin
    Result := 0;
    VL_Th := ThProcesso.Create(True,'',TDModulo(VP_Modulo).V_ArquivoLog, VP_Dados, VP_Procedimento, TDModulo(VP_Modulo), VP_TempoAguarda);
    VL_Th.Start;

end;

function solicitacaoblocante(VP_Modulo: Pointer; VP_Dados: PChar; var VO_Retorno: PChar; VP_TempoAguarda: integer): integer; stdcall;
var
    VL_MensagemIN,VL_MensagemOUT: TMensagem;
    VL_Dados: ansistring;
begin
    VL_MensagemOUT := TMensagem.Create;
    VL_MensagemIN := TMensagem.Create;
    try
        Result := 0;
        VL_Dados := '';
        VL_MensagemOUT.CarregaTags(VP_Dados);
        Result := TDModulo(VP_Modulo).V_DComunicador.ClienteTransmiteSolicitacao('',VL_MensagemOUT, VL_MensagemIN, nil, VP_TempoAguarda);
        VL_MensagemIN.TagToStr(VL_Dados);

        VO_Retorno := StrAlloc(Length(VL_Dados) + 1);
        StrPCopy(VO_Retorno, VL_Dados);

    finally
        VL_MensagemIN.Free;
        VL_MensagemOUT.Free;
    end;

end;

function modulostatus(VP_Modulo: Pointer; var VO_Versao: PChar; var VO_VersaoMensagem: integer; var VO_StatusRetorno: integer): integer; stdcall;
var
    VL_Ansi: ansistring;
begin
    Result := 0;
    VO_StatusRetorno := Ord(TDModulo(VP_Modulo).V_DComunicador.V_ConexaoCliente.Status);

    if VO_StatusRetorno = Ord(csLogado) then
        TDModulo(VP_Modulo).V_DComunicador.IdTCPCliente.IOHandler.CheckForDisconnect(False);

    VO_StatusRetorno := Ord(TDModulo(VP_Modulo).V_DComunicador.V_ConexaoCliente.Status);

    VL_Ansi := IntToStr(C_versao[0]) + '.' + IntToStr(C_versao[1]) + '.' + IntToStr(C_versao[2]);

    VO_Versao := StrAlloc(Length(VL_Ansi) + 1);
    StrPCopy(VO_Versao, VL_Ansi);

    VO_VersaoMensagem := C_Mensagem;

end;





end.
