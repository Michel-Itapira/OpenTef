unit opentefnucleo;

{$mode ObjFPC}{$H+}

interface

uses
    Classes, SysUtils, IniFiles, comunicador, ZConnection, ZDataset, funcoes, rxmemds, IdContext;
type

    { TDNucleo }

    TMenuCompativel = function(VP_Menu: string; var VO_Compativel: boolean): integer; stdcall;
    TGetFuncao = function(VP_TagFuncao: string; var VO_Implementada: boolean): integer; stdcall;

    TRegModulo = record
        Tag: string;
        Handle: THandle;
        Biblioteca: string;
        ModuloConfig_ID: integer;
        MenuCompativel: TMenuCompativel;
        GetFuncoes: TGetFuncao;

    end;

    { TModulos }

    TModulos = class
    private
        fModulos: array of TRegModulo;
    public
        function AddModulo(ModuloConfig_ID: integer): integer;


    end;

    TDNucleo = class(TDataModule)
        ZConexao: TZConnection;
        ZConsulta: TZQuery;
        procedure DataModuleDestroy(Sender: TObject);
    private
        function comando0001(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando0021(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando000A(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando0018(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando0039(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando003C(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando003F(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando0043(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando0044(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando0045(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando004B(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando0053(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando0054(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando0055(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando0056(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando0057(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando0058(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando0059(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando0064(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando0065(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando0066(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando0069(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando006A(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando006B(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
        function comando006C(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
    public
        procedure iniciar;
        function comando(VL_DadosRecebidos: string; VP_AContext: TIdContext): integer;
    end;



var
    DNucleo: TDNucleo;
    Conf: TIniFile;
    VMenuCompativel: TMenuCompativel;

implementation

{ TModulos }

function TModulos.AddModulo(ModuloConfig_ID: integer): integer;
begin

end;

procedure TDNucleo.DataModuleDestroy(Sender: TObject);
begin
    //for DComunicador.IdTCPServerCaixa.Contexts.;
end;

procedure TDNucleo.iniciar;
begin

    ZConexao.LibraryLocation := ExtractFilePath(ParamStr(0)) + 'firebird\fbclient.dll';
    ZConexao.Database := ExtractFilePath(ParamStr(0)) + 'opentef.fdb';
    ZConexao.Connect;


    DComunicador := TDComunicador.Create(Self);

    DComunicador.CriptoRsa.GenerateKeyPair;

    if not FileExists(ExtractFilePath(ParamStr(0)) + 'open_tef.ini') then
    begin
        Conf := TIniFile.Create(PChar(ExtractFilePath(ParamStr(0)) + 'open_tef.ini'));
        Conf.WriteInteger('Servidor', 'CaixaPorta', 0);
        Conf.WriteBool('Servidor', 'CaixaAtiva', True);
        Conf.WriteInteger('Servidor', 'ServicoPorta', 0);
        Conf.WriteBool('Servidor', 'ServicoAtiva', False);
        Conf.Free;
    end;

    Conf := TIniFile.Create(PChar(ExtractFilePath(ParamStr(0)) + 'open_tef.ini'));

    if Conf.ReadInteger('Servidor', 'CaixaPorta', 0) <> 0 then
    begin
        DComunicador.IdTCPServerCaixa.DefaultPort := Conf.ReadInteger('Servidor', 'CaixaPorta', 0);
        DComunicador.IdTCPServerCaixa.Active := Conf.ReadBool('Servidor', 'CaixaAtiva', False);
    end;
    if Conf.ReadInteger('Servidor', 'LibPorta', 0) <> 0 then
    begin
        DComunicador.IdTCPServerServico.DefaultPort := Conf.ReadInteger('Servidor', 'ServicoPorta', 0);
        DComunicador.IdTCPServerServico.Active := Conf.ReadBool('Servidor', 'ServicoAtiva', False);
    end;



     {
     var
        VL_Codigo:Integer;
     begin

      TefLib:= LoadLibrary(pChar(ExtractFilePath(ParamStr(0))+'modulo\tef_lib.dll'));

      Pointer(TefInicializar) := GetProcAddress (TefLib, 'inicializar');
      Pointer(TLogin) := GetProcAddress (TefLib, 'login');
      Pointer(v_SolicitacaoBlocante):=GetProcAddress (TefLib, 'solicitacaoblocante');
      Pointer(VStatusOpenTef):=GetProcAddress(TefLib,'opentefstatus');

    }

end;

function TDNucleo.comando(VL_DadosRecebidos: string; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
begin

    VL_Mensagem := TMensagem.Create;

    if VL_Mensagem.CarregaTags(VL_DadosRecebidos) <> 0 then
    begin
        VP_AContext.Connection.Disconnect;
        Exit;
    end;

    case VL_Mensagem.Comando() of
        '0001': comando0001(VL_Mensagem, VP_AContext);
        '0021': comando0021(VL_Mensagem, VP_AContext);
        '000A': comando000A(VL_Mensagem, VP_AContext);
        '0039': comando0039(VL_Mensagem, VP_AContext);
        '003C': comando003C(VL_Mensagem, VP_AContext);
        '003F': comando003F(VL_Mensagem, VP_AContext);
        '0043': comando0043(VL_Mensagem, VP_AContext);
        '0044': comando0044(VL_Mensagem, VP_AContext);
        '0045': comando0045(VL_Mensagem, VP_AContext);
        '004B': comando004B(VL_Mensagem, VP_AContext);
        '0053': comando0053(VL_Mensagem, VP_AContext);
        '0054': comando0054(VL_Mensagem, VP_AContext);
        '0055': comando0055(VL_Mensagem, VP_AContext);
        '0056': comando0056(VL_Mensagem, VP_AContext);
        '0057': comando0057(VL_Mensagem, VP_AContext);
        '0058': comando0058(VL_Mensagem, VP_AContext);
        '0059': comando0059(VL_Mensagem, VP_AContext);
        '0064': comando0064(VL_Mensagem, VP_AContext);
        '0065': comando0065(VL_Mensagem, VP_AContext);
        '0066': comando0066(VL_Mensagem, VP_AContext);
        '0069': comando0069(VL_Mensagem, VP_AContext);
        '006A': comando006A(VL_Mensagem, VP_AContext);
        '006B': comando006B(VL_Mensagem, VP_AContext);
        '006C': comando006C(VL_Mensagem, VP_AContext);
        else
            VP_AContext.Connection.Disconnect;
    end;
    VL_Mensagem.Free;
end;

function TDNucleo.comando0021(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Dados: string;
    VL_ExpoentePublico, VL_ModuloPublico: string;
    VL_TChaves: TTChaveComunicacao;
    VL_Mensage: TMensagem;

begin
    VL_Mensage := TMensagem.Create;
    VL_Dados := '';
    VL_TChaves.ID := 0;
    VL_TChaves.ChaveComunicacao := '';
    VL_ModuloPublico := '';
    VL_ExpoentePublico := '';
    try
        VP_Mensagem.GetTag('0023', VL_Dados);
        Result := 33;
        if TTConexao(VP_AContext.Data).Status = csDesconectado then
            Exit;
        if VL_Dados <> '' then
        begin
            VP_Mensagem.GetTag('0022', VL_TChaves.ID);
            VL_TChaves := DComunicador.V_ChavesDasConexoes.getChave((VL_TChaves.ID));
            if VL_TChaves.ID > 0 then
            begin
                TTConexao(VP_AContext.Data).setChaveComunicacao(VL_TChaves.ChaveComunicacao);
                try
                    if TTConexao(VP_AContext.Data).Aes.DecryptString(VL_Dados) = 'OK' then
                    begin
                        VL_Mensage.AddComando('0024', '');
                        VL_Mensage.TagToStr(VL_Dados);
                        TTConexao(VP_AContext.Data).Status := csChaveado;
                        VP_AContext.Connection.Socket.WriteLn(VL_Dados);
                        Exit;
                    end;
                except

                end;
            end;
            VP_Mensagem.GetTag('0008', VL_ModuloPublico);
            VP_Mensagem.GetTag('0027', VL_ExpoentePublico);
            if VL_ExpoentePublico = '' then
            begin
                VL_Mensage.AddComando('0026', '31');
                VL_Mensage.TagToStr(VL_Dados);
                VP_AContext.Connection.Socket.WriteLn(VL_Dados);
                Exit;
            end;
        end;
        VL_Mensage.limpar;
        VL_Mensage.AddComando('0025', '');
        VP_Mensagem.GetTag('0008', VL_ModuloPublico);
        VP_Mensagem.GetTag('0027', VL_ExpoentePublico);

        TTConexao(VP_AContext.Data).setModuloPublico(VL_ModuloPublico);
        TTConexao(VP_AContext.Data).setExpoentePublico(VL_ExpoentePublico);

        VL_TChaves.ChaveComunicacao := TTConexao(VP_AContext.Data).getChaveComunicacao;
        VL_TChaves.ID := TTConexao(VP_AContext.Data).ChaveComunicacaoIDX;

        VL_Dados := TTConexao(VP_AContext.Data).Rsa.EncryptString(VL_TChaves.ChaveComunicacao);

        VL_Mensage.AddTag('0009', VL_Dados);
        VL_Mensage.AddTag('0022', VL_TChaves.ID);
        VL_Mensage.AddTag('0008', TTConexao(VP_AContext.Data).ModuloPublico);
        VL_Mensage.AddTag('0027', TTConexao(VP_AContext.Data).ExpoentePublico);
        VL_Mensage.AddTag('0023', TTConexao(VP_AContext.Data).Aes.EncryptString('OK'));

        VL_Mensage.TagToStr(VL_Dados);
        TTConexao(VP_AContext.Data).Status := csChaveado;
        VP_AContext.Connection.Socket.WriteLn(VL_Dados);
        Result := 0;


    finally
        VL_Mensage.Free;
    end;

end;

function TDNucleo.comando0001(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var

    VL_ChaveTerminal, VL_IP: string;
    VL_Mensagem: TMensagem;
    VL_Consulta: TZQuery;
    VL_TerminalSenha: string;
    VL_TerminalTipo: string;

begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_ChaveTerminal := '';
    VL_TerminalSenha := '';
    VL_TerminalTipo := '';
    VL_Consulta := TZQuery.Create(DComunicador);
    VL_Consulta.Connection := DNucleo.ZConexao;
    try
        //inicio do processo
        VP_Mensagem.GetTag('0002', VL_ChaveTerminal);
        VP_Mensagem.GetTag('0035', VL_TerminalSenha);
        VP_Mensagem.GetTag('0037', VL_TerminalTipo);

        VL_IP := TTConexao(VP_AContext.Data).ClienteIp;

        VL_Consulta.Close;
        VL_Consulta.SQL.Text := 'SELECT * FROM P_VAL_TERMINAL(''' + VL_IP + ''',''' + VL_ChaveTerminal + ''',''' +
            VL_TerminalSenha + ''',''' + VL_TerminalTipo + ''')';
        VL_Consulta.Open;

        if VL_Consulta.FieldByName('S_STATUS').AsInteger <> 0 then
        begin
            VL_Mensagem.AddComando('0029', 'OK');
            VL_Mensagem.AddTag('0036', IntToStr(VL_Consulta.FieldByName('S_STATUS').AsInteger));
            Result := VL_Consulta.FieldByName('S_STATUS').AsInteger;
        end
        else
        begin
            TTConexao(VP_AContext.Data).Status := csLogado;
            VL_Mensagem.AddComando('0028', 'OK');
            VL_Mensagem.AddTag('0038', VL_Consulta.FieldByName('S_TIPO').AsString);
        end;

        DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);

    finally
        VL_Mensagem.Free;
        VL_Consulta.Free;
    end;

end;

function TDNucleo.comando000A(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Dados: string;
    VL_Transacao: string;
begin
    Result := 0;
    VL_Dados := '';
    VL_Transacao := '';
    //testa conexão
    if TTConexao(VP_AContext.Data).Status <> csLogado then
    begin
        VP_Mensagem.Limpar;
        VP_Mensagem.AddComando('0026', '35');
        DComunicador.EnviarCliente(VP_Mensagem, VP_AContext);
        exit;
    end;


    // criar transacao
    // consultar com os modulos os menus solicitado e compativel com caixa


    //CRIAR FUNCÇÃO QUE RETORNA MENU COMPATIVEL




    DComunicador.EnviarCliente(VP_Mensagem, VP_AContext);

end;

function TDNucleo.comando0018(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_DadosMenu: string;
begin
    Result := 0;
    VL_DadosMenu := '';
    VL_Mensagem := TMensagem.Create;
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VP_Mensagem.Limpar;
            VP_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VP_Mensagem, VP_AContext);
            exit;
        end;
        VL_Mensagem.Limpar;
        VL_Mensagem.AddComando('0018', '');

        //VP_Mensagem.GetTag(VL_DadosMenu);
                  {
        case VL_DadosMenu of
          '0019' :


        end;
        if Length(VL_TextoMenu)>0 then
        begin
         VL_Mensagem.AddTag('0019',VL_DadosMenu);
        end;

        VP_Mensagem.GetTag('0019',VL_DadosMenu);
        if Length(VL_TextoMenu)>0 then
        begin
         VL_Mensagem.AddTag('0019',VL_DadosMenu);
        end;

        EnviarCliente(VL_Mensagem,VP_AContext);
                         }
    finally
        VL_Mensagem.Free;
    end;

end;
function TDNucleo.comando0039(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_Tabela: TRxMemoryData;
    VL_TLoja: TZQuery;
    VL_Tag: ansistring;
    VL_Permissao: string;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_Tabela := TRxMemoryData.Create(nil);
    VL_TLoja := TZQuery.Create(DComunicador);
    VL_TLoja.Connection := DNucleo.ZConexao;
    VL_Tag := '';
    VL_Permissao := 'U';
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            exit;
        end;
        //verifica permissao
        VP_Mensagem.GetTag('0037', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_Permissao := VL_Tag;
        if VL_Permissao = 'U' then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '45');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VP_Mensagem.GetTag('003A', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        F.StrToRxMemData(VL_Tag, VL_Tabela);
        VL_Tabela.Open;
        VL_Tabela.First;
        while not VL_Tabela.EOF do
        begin
            if VL_Tabela.FieldByName('ID').AsInteger = 0 then
            begin
                VL_TLoja.Close;
                VL_TLoja.SQL.Text := 'SELECT * FROM LOJA WHERE CNPJ=''' + VL_Tabela.FieldByName('CNPJ').AsString + '''';
                VL_TLoja.Open;
                if VL_TLoja.RecordCount > 0 then
                begin
                    VL_Mensagem.Limpar;
                    VL_Mensagem.AddComando('0026', '43');
                    DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                    Exit;
                end;
                VL_TLoja.Close;
                VL_TLoja.SQL.Text := 'INSERT INTO LOJA(CNPJ,RAZAO,FANTASIA)VALUES(''' + VL_Tabela.FieldByName(
                    'CNPJ').AsString + ''',''' + VL_Tabela.FieldByName('RAZAO').AsString + ''',''' +
                    VL_Tabela.FieldByName('FANTASIA').AsString + ''')';
                VL_TLoja.ExecSQL;
                VL_TLoja.Close;
                VL_TLoja.SQL.Text := 'SELECT * FROM LOJA WHERE CNPJ=''' + VL_Tabela.FieldByName('CNPJ').AsString + '''';
                VL_TLoja.Open;
                if VL_TLoja.RecordCount = 0 then
                begin
                    VL_Mensagem.Limpar;
                    VL_Mensagem.AddComando('0026', '44');
                    DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                    Exit;
                end;
                VL_Mensagem.Limpar;
                VL_Mensagem.AddComando('003B', '');
                VL_Mensagem.AddTag('0036', VL_TLoja.FieldByName('ID').AsString);
                DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                Exit;
            end;
            VL_Tabela.Next;
        end;
    finally
        DNucleo.ZConexao.Commit;
        VL_Mensagem.Free;
        VL_Tabela.Free;
        VL_TLoja.Free;
    end;
end;
function TDNucleo.comando003C(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_TLoja: TZQuery;
    VL_Tag: ansistring;
    VL_Dados: ansistring;
    VL_TipoPesquisa: ansistring;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_TLoja := TZQuery.Create(DComunicador);
    VL_TLoja.Connection := DNucleo.ZConexao;
    VL_Tag := '';
    VL_Dados := '0';
    VL_TipoPesquisa := '';
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VP_Mensagem.GetTag('0040', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_TipoPesquisa := VL_Tag;
        VP_Mensagem.GetTag('003D', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_Dados := VL_Tag;

        //pesquisa por ID
        if VL_TipoPesquisa = 'ID' then
        begin
            VL_TLoja.Close;
            VL_TLoja.SQL.Text := 'SELECT L.*,''F'' AS MULT FROM LOJA L WHERE ((ID=' + VL_Dados + ') or (' + VL_Dados +
                ' is not null) and ((' + VL_Dados + ' is null) or (' + VL_Dados + '=0)))';
            VL_TLoja.Open;

            VL_Tag := F.ZQueryToStrRxMemData(VL_TLoja);

            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('003E', '');
            VL_Mensagem.AddTag('0038', VL_Tag);
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
        end;

    finally
        VL_Mensagem.Free;
        VL_TLoja.Free;
    end;
end;
function TDNucleo.comando003F(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_Loja: TZQuery;
    VL_Tabela: TRxMemoryData;
    VL_Tag: ansistring;
    VL_ID: int64;
    VL_Permissao: string;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_Loja := TZQuery.Create(DComunicador);
    VL_Loja.Connection := DNucleo.ZConexao;
    VL_Tabela := TRxMemoryData.Create(nil);
    VL_Tag := '';
    VL_ID := 0;
    VL_Permissao := 'U';
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            exit;
        end;
        VP_Mensagem.GetTag('003A', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        F.StrToRxMemData(VL_Tag, VL_Tabela);
        VL_Tabela.Open;

        VP_Mensagem.GetTag('003D', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_ID := StrToInt(VL_Tag);
        if VL_ID = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '47');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VP_Mensagem.GetTag('0037', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_Permissao := VL_Tag;
        if VL_Permissao = 'U' then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '45');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_Loja.Close;
        VL_Loja.SQL.Text := 'SELECT * FROM LOJA WHERE ID=' + IntToStr(VL_ID);
        VL_Loja.Open;

        if VL_Loja.RecordCount = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '48');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        if VL_Tabela.Locate('ID', VL_ID, []) then
        begin
            if ((VL_Tabela.FieldByName('ID').AsInteger <> VL_Loja.FieldByName('ID').AsInteger) or
                (VL_Tabela.FieldByName('CNPJ').AsString <> VL_Loja.FieldByName('CNPJ').AsString)) then
            begin
                VL_Mensagem.Limpar;
                VL_Mensagem.AddComando('0026', '49');
                DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                Exit;
            end;
            VL_Loja.Close;
            VL_Loja.SQL.Text := 'UPDATE LOJA SET ' + 'RAZAO=''' + VL_Tabela.FieldByName('RAZAO').AsString + ''',' +
                'MULTLOJA_ID=''' + IntToStr(VL_Tabela.FieldByName('MULTLOJA_ID').AsInteger) + ''',' + 'FANTASIA=''' +
                VL_Tabela.FieldByName('FANTASIA').AsString + ''' WHERE ' + 'ID=' + IntToStr(VL_ID);
            VL_Loja.ExecSQL;
            VL_Loja.Close;
            VL_Loja.SQL.Text := 'SELECT * FROM LOJA WHERE ID=' + IntToStr(VL_ID);
            VL_Loja.Open;
            if VL_Loja.RecordCount = 0 then
            begin
                VL_Mensagem.Limpar;
                VL_Mensagem.AddComando('0026', '46');
                DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                Exit;
            end;
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0042', '');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end
        else
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '46');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
    finally
        DNucleo.ZConexao.Commit;
        VL_Mensagem.Free;
        VL_Loja.Free;
        VL_Tabela.Free;
    end;
end;
function TDNucleo.comando0043(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_TPdv: TZQuery;
    VL_Tag: ansistring;
    VL_Dados: ansistring;
    VL_TipoPesquisa: ansistring;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_TPdv := TZQuery.Create(DComunicador);
    VL_TPdv.Connection := DNucleo.ZConexao;
    VL_Tag := '';
    VL_Dados := '0';
    VL_TipoPesquisa := '';
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VP_Mensagem.GetTag('0040', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_TipoPesquisa := VL_Tag;
        VP_Mensagem.GetTag('003D', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;

        VL_Dados := VL_Tag;

        //pesquisa por ID
        if VL_TipoPesquisa = 'ID' then
        begin
            VL_TPdv.Close;
            VL_TPdv.SQL.Text := 'SELECT * FROM PDV WHERE ((ID=' + VL_Dados + ') or (' + VL_Dados + ' is not null) and ((' +
                VL_Dados + ' is null) or (' + VL_Dados + '=0)))';
            VL_TPdv.Open;

            VL_Tag := F.ZQueryToStrRxMemData(VL_TPdv);

            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('003E', '');
            VL_Mensagem.AddTag('0038', VL_Tag);
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
        end;

    finally
        VL_Mensagem.Free;
        VL_TPdv.Free;
    end;

end;
function TDNucleo.comando0044(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_Tabela: TRxMemoryData;
    VL_TPdv: TZQuery;
    VL_Permissao: string;
    VL_Tag: ansistring;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_Tabela := TRxMemoryData.Create(nil);
    VL_TPdv := TZQuery.Create(DComunicador);
    VL_TPdv.Connection := DNucleo.ZConexao;
    VL_Permissao := 'U';
    VL_Tag := '';
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica permissao
        VP_Mensagem.GetTag('0037', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_Permissao := VL_Tag;
        if VL_Permissao = 'U' then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '45');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VP_Mensagem.GetTag('003A', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        f.StrToRxMemData(VL_Tag, VL_Tabela);
        VL_Tabela.Open;
        VL_Tabela.First;
        while not VL_Tabela.EOF do
        begin
            if VL_Tabela.FieldByName('ID').AsInteger = 0 then
            begin
                //verifica se o pdv ja foi cadastrado
                VL_TPdv.Close;
                VL_TPdv.SQL.Text := 'SELECT FIRST 1 ID FROM PDV WHERE CHAVE=''' + VL_Tabela.FieldByName('CHAVE').AsString + '''';
                VL_TPdv.Open;
                if VL_TPdv.RecordCount > 0 then
                begin
                    VL_Mensagem.Limpar;
                    VL_Mensagem.AddComando('0026', '43');
                    DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                    Exit;
                end;
                VL_TPdv.Close;
                VL_TPdv.SQL.Text := 'INSERT INTO PDV(LOJA_ID,DESCRICAO,IP,CHAVE)VALUES(''' + VL_Tabela.FieldByName(
                    'LOJA_ID').AsString + ''',''' + VL_Tabela.FieldByName('DESCRICAO').AsString + ''',''' +
                    VL_Tabela.FieldByName('IP').AsString + ''',''' + VL_Tabela.FieldByName('CHAVE').AsString + ''')';
                VL_TPdv.ExecSQL;
                VL_TPdv.Close;
                VL_TPdv.SQL.Text := 'SELECT * FROM PDV WHERE CHAVE=''' + VL_Tabela.FieldByName('CHAVE').AsString + '''';
                VL_TPdv.Open;
                if VL_TPdv.RecordCount = 0 then
                begin
                    VL_Mensagem.Limpar;
                    VL_Mensagem.AddComando('0026', '44');
                    DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                    Exit;
                end
                else
                begin
                    VL_Mensagem.Limpar;
                    VL_Mensagem.AddComando('003B', '');
                    VL_Mensagem.AddTag('0036', VL_TPdv.FieldByName('ID').AsString);
                    DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                    exit;
                end;
            end;
            VL_Tabela.Next;
        end;
    finally
        DNucleo.ZConexao.Commit;
        VL_Mensagem.Free;
        VL_Tabela.Free;
        VL_TPdv.Free;
    end;

end;
function TDNucleo.comando0045(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_TPdv: TZQuery;
    VL_Tag: ansistring;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_TPdv := TZQuery.Create(DComunicador);
    VL_TPdv.Connection := DNucleo.ZConexao;
    VL_Tag := '';
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VP_Mensagem.GetTag('0041', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            Result := 47;
            Exit;
        end;
        VL_TPdv.Close;
        VL_TPdv.SQL.Text := 'SELECT FIRST 1 ID FROM PDV WHERE CHAVE=''' + VL_Tag + '''';
        VL_TPdv.Open;
        if VL_TPdv.RecordCount > 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '43');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_Mensagem.Limpar;
        VL_Mensagem.AddComando('0046', 'ok');
        DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
    finally
        VL_Mensagem.Free;
    end;

end;
function TDNucleo.comando004B(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_Tabela: TRxMemoryData;
    VL_TPdv: TZQuery;
    VL_Permissao: string;
    VL_Tag: ansistring;
    VL_ID: int64;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_Tabela := TRxMemoryData.Create(nil);
    VL_TPdv := TZQuery.Create(DComunicador);
    VL_TPdv.Connection := DNucleo.ZConexao;
    VL_Permissao := 'U';
    VL_Tag := '';
    VL_ID := 0;
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica parametros
        VP_Mensagem.GetTag('003D', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_ID := StrToInt(VL_Tag);
        if VL_ID = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '47');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica permissao
        VP_Mensagem.GetTag('0037', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_Permissao := VL_Tag;
        if VL_Permissao = 'U' then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '45');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VP_Mensagem.GetTag('003A', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        F.StrToRxMemData(VL_Tag, VL_Tabela);
        VL_Tabela.Open;
        //verifica se existe o id pra amodificação
        VL_TPdv.Close;
        VL_TPdv.SQL.Text := 'SELECT * FROM PDV WHERE ID=' + IntToStr(VL_ID);
        VL_TPdv.Open;

        if VL_TPdv.RecordCount = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '48');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        if VL_Tabela.Locate('ID', VL_ID, []) then
        begin
            if ((VL_Tabela.FieldByName('ID').AsInteger <> VL_TPdv.FieldByName('ID').AsInteger) or
                ((VL_Tabela.FieldByName('CHAVE').AsString <> VL_TPdv.FieldByName('CHAVE').AsString) and (VL_TPdv.FieldByName('CHAVE').AsString <> ''))) then
            begin
                VL_Mensagem.Limpar;
                VL_Mensagem.AddComando('0026', '49');
                DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                Exit;
            end;

            VL_TPdv.Close;
            VL_TPdv.SQL.Text := 'UPDATE PDV SET ' + 'LOJA_ID=''' + VL_Tabela.FieldByName('LOJA_ID').AsString + ''',' +
                'DESCRICAO=''' + VL_Tabela.FieldByName('DESCRICAO').AsString + ''',' + 'IP=''' + VL_Tabela.FieldByName('IP').AsString +
                ''',' + 'CODIGO=''' + VL_Tabela.FieldByName('CODIGO').AsString + ''',' + 'PINPAD_ID=''' +
                VL_Tabela.FieldByName('PINPAD_ID').AsString + ''',' + 'PINPAD_COM=''' + VL_Tabela.FieldByName('PINPAD_COM').AsString +
                ''',' + 'CHAVE=''' + VL_Tabela.FieldByName('CHAVE').AsString + ''' WHERE ' + 'ID=' + IntToStr(VL_ID);
            VL_TPdv.ExecSQL;
            VL_TPdv.Close;
            VL_TPdv.SQL.Text := 'SELECT * FROM PDV WHERE ID=' + IntToStr(VL_ID);
            VL_TPdv.Open;
            if VL_TPdv.RecordCount = 0 then
            begin
                VL_Mensagem.Limpar;
                VL_Mensagem.AddComando('0026', '46');
                DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                Exit;
            end;
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0042', '');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end
        else
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '46');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;

    finally
        DNucleo.ZConexao.Commit;
        VL_Mensagem.Free;
        VL_Tabela.Free;
        VL_TPdv.Free;
    end;

end;
function TDNucleo.comando0053(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_Tabela: TRxMemoryData;
    VL_TPinPad: TZQuery;
    VL_Permissao: string;
    VL_Tag: ansistring;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_Tabela := TRxMemoryData.Create(nil);
    VL_TPinPad := TZQuery.Create(DComunicador);
    VL_TPinPad.Connection := DNucleo.ZConexao;
    VL_Permissao := 'U';
    VL_Tag := '';
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica permissao
        VP_Mensagem.GetTag('0037', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_Permissao := VL_Tag;
        if VL_Permissao = 'U' then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '45');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VP_Mensagem.GetTag('003A', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        f.StrToRxMemData(VL_Tag, VL_Tabela);
        VL_Tabela.Open;
        VL_Tabela.First;
        while not VL_Tabela.EOF do
        begin
            if VL_Tabela.FieldByName('ID').AsInteger = 0 then
            begin
                VL_TPinPad.Close;
                VL_TPinPad.SQL.Text := 'INSERT INTO PINPAD(FABRICANTE_MODELO)VALUES(''' + VL_Tabela.FieldByName(
                    'FABRICANTE_MODELO').AsString + ''')';
                VL_TPinPad.ExecSQL;
                VL_TPinPad.Close;
                VL_TPinPad.SQL.Text := 'SELECT * FROM PINPAD WHERE FABRICANTE_MODELO=''' + VL_Tabela.FieldByName('FABRICANTE_MODELO').AsString + '''';
                VL_TPinPad.Open;
                if VL_TPinPad.RecordCount = 0 then
                begin
                    VL_Mensagem.Limpar;
                    VL_Mensagem.AddComando('0026', '44');
                    DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                    Exit;
                end
                else
                begin
                    VL_Mensagem.Limpar;
                    VL_Mensagem.AddComando('003B', '');
                    VL_Mensagem.AddTag('0036', VL_TPinPad.FieldByName('ID').AsString);
                    DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                    exit;
                end;
            end;
            VL_Tabela.Next;
        end;
    finally
        DNucleo.ZConexao.Commit;
        VL_Mensagem.Free;
        VL_Tabela.Free;
        VL_TPinPad.Free;
    end;

end;
function TDNucleo.comando0054(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_TPinPad: TZQuery;
    VL_Tag: ansistring;
    VL_Dados: ansistring;
    VL_TipoPesquisa: ansistring;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_TPinPad := TZQuery.Create(DComunicador);
    VL_TPinPad.Connection := DNucleo.ZConexao;
    VL_Tag := '';
    VL_Dados := '0';
    VL_TipoPesquisa := '';
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VP_Mensagem.GetTag('0040', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_TipoPesquisa := VL_Tag;
        VP_Mensagem.GetTag('003D', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;

        VL_Dados := VL_Tag;

        //pesquisa por ID
        if VL_TipoPesquisa = 'ID' then
        begin
            VL_TPinPad.Close;
            VL_TPinPad.SQL.Text := 'SELECT * FROM PINPAD WHERE ((ID=' + VL_Dados + ') or (' + VL_Dados + ' is not null) and ((' +
                VL_Dados + ' is null) or (' + VL_Dados + '=0)))';
            VL_TPinPad.Open;

            VL_Tag := F.ZQueryToStrRxMemData(VL_TPinPad);

            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('003E', '');
            VL_Mensagem.AddTag('0038', VL_Tag);
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
        end;

    finally
        VL_Mensagem.Free;
        VL_TPinPad.Free;
    end;
end;
function TDNucleo.comando0055(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_Tabela: TRxMemoryData;
    VL_TPinPad: TZQuery;
    VL_Permissao: string;
    VL_Tag: ansistring;
    VL_ID: int64;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_Tabela := TRxMemoryData.Create(nil);
    VL_TPinPad := TZQuery.Create(DComunicador);
    VL_TPinPad.Connection := DNucleo.ZConexao;
    VL_Permissao := 'U';
    VL_Tag := '';
    VL_ID := 0;
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica parametros
        VP_Mensagem.GetTag('003D', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_ID := StrToInt(VL_Tag);
        if VL_ID = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '47');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica permissao
        VP_Mensagem.GetTag('0037', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_Permissao := VL_Tag;
        if VL_Permissao = 'U' then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '45');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VP_Mensagem.GetTag('003A', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        F.StrToRxMemData(VL_Tag, VL_Tabela);
        VL_Tabela.Open;
        //verifica se existe o id pra amodificação
        VL_TPinPad.Close;
        VL_TPinPad.SQL.Text := 'SELECT * FROM PINPAD WHERE ID=' + IntToStr(VL_ID);
        VL_TPinPad.Open;

        if VL_TPinPad.RecordCount = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '48');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        if VL_Tabela.Locate('ID', VL_ID, []) then
        begin
            if (VL_Tabela.FieldByName('ID').AsInteger <> VL_TPinPad.FieldByName('ID').AsInteger) then
            begin
                VL_Mensagem.Limpar;
                VL_Mensagem.AddComando('0026', '49');
                DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                Exit;
            end;

            VL_TPinPad.Close;
            VL_TPinPad.SQL.Text := 'UPDATE PINPAD SET ' + 'FABRICANTE_MODELO=''' + VL_Tabela.FieldByName(
                'FABRICANTE_MODELO').AsString + '''' + ' WHERE ' + 'ID=' + IntToStr(VL_ID);
            VL_TPinPad.ExecSQL;
            VL_TPinPad.Close;
            VL_TPinPad.SQL.Text := 'SELECT * FROM PINPAD WHERE ID=' + IntToStr(VL_ID);
            VL_TPinPad.Open;
            if VL_TPinPad.RecordCount = 0 then
            begin
                VL_Mensagem.Limpar;
                VL_Mensagem.AddComando('0026', '46');
                DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                Exit;
            end;
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0042', '');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end
        else
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '46');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;

    finally
        DNucleo.ZConexao.Commit;
        VL_Mensagem.Free;
        VL_Tabela.Free;
        VL_TPinPad.Free;
    end;

end;
function TDNucleo.comando0056(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_TConfigurador: TZQuery;
    VL_Tag: ansistring;
    VL_Dados: ansistring;
    VL_TipoPesquisa: ansistring;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_TConfigurador := TZQuery.Create(DComunicador);
    VL_TConfigurador.Connection := DNucleo.ZConexao;
    VL_Tag := '';
    VL_Dados := '0';
    VL_TipoPesquisa := '';
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VP_Mensagem.GetTag('0040', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_TipoPesquisa := VL_Tag;
        VP_Mensagem.GetTag('003D', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;

        VL_Dados := VL_Tag;

        //pesquisa por ID
        if VL_TipoPesquisa = 'ID' then
        begin
            VL_TConfigurador.Close;
            VL_TConfigurador.SQL.Text := 'SELECT * FROM CONFIGURADOR WHERE ((ID=' + VL_Dados + ') or (' + VL_Dados +
                ' is not null) and ((' + VL_Dados + ' is null) or (' + VL_Dados + '=0)))';
            VL_TConfigurador.Open;

            VL_Tag := F.ZQueryToStrRxMemData(VL_TConfigurador);

            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('003E', '');
            VL_Mensagem.AddTag('0038', VL_Tag);
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
        end;

    finally
        VL_Mensagem.Free;
        VL_TConfigurador.Free;
    end;

end;
function TDNucleo.comando0057(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_Tabela: TRxMemoryData;
    VL_TConfigurador: TZQuery;
    VL_Permissao: string;
    VL_Tag: ansistring;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_Tabela := TRxMemoryData.Create(nil);
    VL_TConfigurador := TZQuery.Create(DComunicador);
    VL_TConfigurador.Connection := DNucleo.ZConexao;
    VL_Permissao := 'U';
    VL_Tag := '';
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica permissao
        VP_Mensagem.GetTag('0037', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_Permissao := VL_Tag;
        if VL_Permissao <> 'C' then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '45');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VP_Mensagem.GetTag('003A', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        f.StrToRxMemData(VL_Tag, VL_Tabela);
        VL_Tabela.Open;
        VL_Tabela.First;
        while not VL_Tabela.EOF do
        begin
            if VL_Tabela.FieldByName('ID').AsInteger = 0 then
            begin
                //verifica se o configurador ja foi cadastrado
                VL_TConfigurador.Close;
                VL_TConfigurador.SQL.Text := 'SELECT FIRST 1 ID FROM CONFIGURADOR WHERE CHAVE=''' + VL_Tabela.FieldByName('CHAVE').AsString + '''';
                VL_TConfigurador.Open;
                if VL_TConfigurador.RecordCount > 0 then
                begin
                    VL_Mensagem.Limpar;
                    VL_Mensagem.AddComando('0026', '43');
                    DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                    Exit;
                end;
                VL_TConfigurador.Close;
                VL_TConfigurador.SQL.Text := 'INSERT INTO CONFIGURADOR(DESCRICAO,IP,CHAVE,SENHA_CONFIGURADOR,' +
                    'SENHA_ADMINISTRADOR,SENHA_USUARIO)VALUES(''' + VL_Tabela.FieldByName('DESCRICAO').AsString +
                    ''',''' + VL_Tabela.FieldByName('IP').AsString + ''',''' + VL_Tabela.FieldByName('CHAVE').AsString +
                    ''',''' + VL_Tabela.FieldByName('SENHA_CONFIGURADOR').AsString + ''',''' +
                    VL_Tabela.FieldByName('SENHA_ADMINISTRADOR').AsString + ''',''' + VL_Tabela.FieldByName(
                    'SENHA_USUARIO').AsString + ''')';

                VL_TConfigurador.ExecSQL;
                VL_TConfigurador.Close;
                VL_TConfigurador.SQL.Text := 'SELECT * FROM CONFIGURADOR WHERE CHAVE=''' + VL_Tabela.FieldByName('CHAVE').AsString + '''';
                VL_TConfigurador.Open;
                if VL_TConfigurador.RecordCount = 0 then
                begin
                    VL_Mensagem.Limpar;
                    VL_Mensagem.AddComando('0026', '44');
                    DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                    Exit;
                end
                else
                begin
                    VL_Mensagem.Limpar;
                    VL_Mensagem.AddComando('003B', '');
                    VL_Mensagem.AddTag('0036', VL_TConfigurador.FieldByName('ID').AsString);
                    DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                    exit;
                end;
            end;
            VL_Tabela.Next;
        end;
    finally
        DNucleo.ZConexao.Commit;
        VL_Mensagem.Free;
        VL_Tabela.Free;
        VL_TConfigurador.Free;
    end;

end;
function TDNucleo.comando0058(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_Tabela: TRxMemoryData;
    VL_TConfigurador: TZQuery;
    VL_Permissao: string;
    VL_Tag: ansistring;
    VL_ID: int64;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_Tabela := TRxMemoryData.Create(nil);
    VL_TConfigurador := TZQuery.Create(DComunicador);
    VL_TConfigurador.Connection := DNucleo.ZConexao;
    VL_Permissao := 'U';
    VL_Tag := '';
    VL_ID := 0;
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica parametros
        VP_Mensagem.GetTag('003D', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_ID := StrToInt(VL_Tag);
        if VL_ID = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '47');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica permissao
        VP_Mensagem.GetTag('0037', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_Permissao := VL_Tag;
        if VL_Permissao <> 'C' then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '45');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VP_Mensagem.GetTag('003A', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        F.StrToRxMemData(VL_Tag, VL_Tabela);
        VL_Tabela.Open;
        //verifica se existe o id pra modificação
        VL_TConfigurador.Close;
        VL_TConfigurador.SQL.Text := 'SELECT * FROM CONFIGURADOR WHERE ID=' + IntToStr(VL_ID);
        VL_TConfigurador.Open;

        if VL_TConfigurador.RecordCount = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '48');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        if VL_Tabela.Locate('ID', VL_ID, []) then
        begin
            if ((VL_Tabela.FieldByName('ID').AsInteger <> VL_TConfigurador.FieldByName('ID').AsInteger) or
                ((VL_Tabela.FieldByName('CHAVE').AsString <> VL_TConfigurador.FieldByName('CHAVE').AsString) and
                (VL_TConfigurador.FieldByName('CHAVE').AsString <> ''))) then
            begin
                VL_Mensagem.Limpar;
                VL_Mensagem.AddComando('0026', '49');
                DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                Exit;
            end;

            VL_TConfigurador.Close;
            VL_TConfigurador.SQL.Text := 'UPDATE CONFIGURADOR SET ' + 'DESCRICAO=''' + VL_Tabela.FieldByName(
                'DESCRICAO').AsString + ''',' + 'IP=''' + VL_Tabela.FieldByName('IP').AsString + ''',' + 'CHAVE=''' +
                VL_Tabela.FieldByName('CHAVE').AsString + ''',' + 'SENHA_CONFIGURADOR=''' + VL_Tabela.FieldByName('SENHA_CONFIGURADOR').AsString +
                ''',' + 'SENHA_ADMINISTRADOR=''' + VL_Tabela.FieldByName('SENHA_ADMINISTRADOR').AsString + ''',' +
                'SENHA_USUARIO=''' + VL_Tabela.FieldByName('SENHA_USUARIO').AsString + ''' WHERE ' + 'ID=' + IntToStr(VL_ID);
            VL_TConfigurador.ExecSQL;
            VL_TConfigurador.Close;
            VL_TConfigurador.SQL.Text := 'SELECT * FROM CONFIGURADOR WHERE ID=' + IntToStr(VL_ID);
            VL_TConfigurador.Open;
            if VL_TConfigurador.RecordCount = 0 then
            begin
                VL_Mensagem.Limpar;
                VL_Mensagem.AddComando('0026', '46');
                DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                Exit;
            end;
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0042', '');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end
        else
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '46');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;

    finally
        DNucleo.ZConexao.Commit;
        VL_Mensagem.Free;
        VL_Tabela.Free;
        VL_TConfigurador.Free;
    end;

end;
function TDNucleo.comando0059(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_TConfigurador: TZQuery;
    VL_Tag: ansistring;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_TConfigurador := TZQuery.Create(DComunicador);
    VL_TConfigurador.Connection := DNucleo.ZConexao;
    VL_Tag := '';
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VP_Mensagem.GetTag('0041', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            Result := 47;
            Exit;
        end;
        VL_TConfigurador.Close;
        VL_TConfigurador.SQL.Text := 'SELECT FIRST 1 ID FROM CONFIGURADOR WHERE CHAVE=''' + VL_Tag + '''';
        VL_TConfigurador.Open;
        if VL_TConfigurador.RecordCount > 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '43');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_Mensagem.Limpar;
        VL_Mensagem.AddComando('0046', 'ok');
        DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
    finally
        VL_Mensagem.Free;
    end;

end;
function TDNucleo.comando0064(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_Tabela: TRxMemoryData;
    VL_TMultLoja: TZQuery;
    VL_Permissao: string;
    VL_Tag: ansistring;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_Tabela := TRxMemoryData.Create(nil);
    VL_TMultLoja := TZQuery.Create(DComunicador);
    VL_TMultLoja.Connection := DNucleo.ZConexao;
    VL_Permissao := 'U';
    VL_Tag := '';
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica permissao
        VP_Mensagem.GetTag('0037', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_Permissao := VL_Tag;
        if VL_Permissao = 'U' then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '45');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VP_Mensagem.GetTag('003A', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        f.StrToRxMemData(VL_Tag, VL_Tabela);
        VL_Tabela.Open;
        VL_Tabela.First;
        while not VL_Tabela.EOF do
        begin
            if VL_Tabela.FieldByName('ID').AsInteger = 0 then
            begin
                VL_TMultLoja.Close;
                VL_TMultLoja.SQL.Text := 'INSERT INTO MULTLOJA(LOJA_ID)VALUES(''' + VL_Tabela.FieldByName('LOJA_ID').AsString + ''')';
                VL_TMultLoja.ExecSQL;
                VL_TMultLoja.Close;
                VL_TMultLoja.SQL.Text := 'SELECT * FROM MULTLOJA WHERE LOJA_ID=''' + VL_Tabela.FieldByName('LOJA_ID').AsString + '''';
                VL_TMultLoja.Open;
                if VL_TMultLoja.RecordCount = 0 then
                begin
                    VL_Mensagem.Limpar;
                    VL_Mensagem.AddComando('0026', '44');
                    DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                    Exit;
                end
                else
                begin
                    VL_Mensagem.Limpar;
                    VL_Mensagem.AddComando('003B', '');
                    VL_Mensagem.AddTag('0036', VL_TMultLoja.FieldByName('ID').AsString);
                    DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
                    exit;
                end;
            end;
            VL_Tabela.Next;
        end;
    finally
        DNucleo.ZConexao.Commit;
        F.GravaLog(TTConexao(VP_AContext.Data).ClienteIp, laIncluir, VP_Mensagem);
        VL_Mensagem.Free;
        VL_Tabela.Free;
        VL_TMultLoja.Free;
    end;
end;
function TDNucleo.comando0065(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_TMultLoja: TZQuery;
    VL_Tag: ansistring;
    VL_Dados: ansistring;
    VL_TipoPesquisa: ansistring;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_TMultLoja := TZQuery.Create(DComunicador);
    VL_TMultLoja.Connection := DNucleo.ZConexao;
    VL_Tag := '';
    VL_Dados := '0';
    VL_TipoPesquisa := '';
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VP_Mensagem.GetTag('0040', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_TipoPesquisa := VL_Tag;
        VP_Mensagem.GetTag('003D', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;

        VL_Dados := VL_Tag;

        //pesquisa por ID
        if VL_TipoPesquisa = 'ID' then
        begin
            VL_TMultLoja.Close;
            VL_TMultLoja.SQL.Text := 'SELECT M.*,L.CNPJ,L.RAZAO FROM MULTLOJA M ' + 'LEFT OUTER JOIN LOJA L ON L.ID=M.LOJA_ID WHERE ((M.ID=' +
                VL_Dados + ') or (' + VL_Dados + ' is not null) and ' + '((' + VL_Dados + ' is null) or (' + VL_Dados + '=0)))';
            VL_TMultLoja.Open;

            VL_Tag := F.ZQueryToStrRxMemData(VL_TMultLoja);

            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('003E', '');
            VL_Mensagem.AddTag('0038', VL_Tag);
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
        end;

    finally
        VL_Mensagem.Free;
        VL_TMultLoja.Free;
    end;

end;
function TDNucleo.comando0066(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_TMultLoja: TZQuery;
    VL_Permissao: string;
    VL_Tag: ansistring;
    VL_ID: int64;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_TMultLoja := TZQuery.Create(DComunicador);
    VL_TMultLoja.Connection := DNucleo.ZConexao;
    VL_Permissao := 'U';
    VL_Tag := '';
    VL_ID := 0;
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica parametros
        VP_Mensagem.GetTag('003D', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_ID := StrToInt(VL_Tag);
        if VL_ID = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '47');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica permissao
        VP_Mensagem.GetTag('0037', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_Permissao := VL_Tag;
        if VL_Permissao = 'U' then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '45');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica se existe o id pra exclusão
        VL_TMultLoja.Close;
        VL_TMultLoja.SQL.Text := 'SELECT * FROM MULTLOJA WHERE ID=' + IntToStr(VL_ID);
        VL_TMultLoja.Open;

        if VL_TMultLoja.RecordCount = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '48');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //exclui multloja
        VL_TMultLoja.Close;
        VL_TMultLoja.SQL.Text := 'DELETE FROM MULTLOJA WHERE ' + 'ID=' + IntToStr(VL_ID);
        VL_TMultLoja.ExecSQL;

        //atualiza loja
        VL_TMultLoja.Close;
        VL_TMultLoja.SQL.Text := 'UPDATE LOJA SET MULTLOJA_ID=NULL WHERE MULTLOJA_ID=' + IntToStr(VL_ID);
        VL_TMultLoja.ExecSQL;

        VL_Mensagem.Limpar;
        VL_Mensagem.AddComando('0067', '');
        VL_Mensagem.AddTag('0036', VL_ID);
        DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);

    finally
        DNucleo.ZConexao.Commit;
        F.GravaLog(TTConexao(VP_AContext.Data).ClienteIp, laExcluir, VP_Mensagem);
        VL_Mensagem.Free;
        VL_TMultLoja.Free;
    end;

end;
function TDNucleo.comando0069(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_TLoja: TZQuery;
    VL_Permissao: string;
    VL_Tag: ansistring;
    VL_ID: int64;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_TLoja := TZQuery.Create(DComunicador);
    VL_TLoja.Connection := DNucleo.ZConexao;
    VL_Permissao := 'U';
    VL_Tag := '';
    VL_ID := 0;
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica parametros
        VP_Mensagem.GetTag('003D', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_ID := StrToInt(VL_Tag);
        if VL_ID = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '47');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica permissao
        VP_Mensagem.GetTag('0037', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_Permissao := VL_Tag;
        if VL_Permissao = 'U' then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '45');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica se existe o id pra exclusão
        VL_TLoja.Close;
        VL_TLoja.SQL.Text := 'SELECT * FROM LOJA WHERE ID=' + IntToStr(VL_ID);
        VL_TLoja.Open;

        if VL_TLoja.RecordCount = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '48');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //exclui loja
        VL_TLoja.Close;
        VL_TLoja.SQL.Text := 'DELETE FROM LOJA WHERE ' + 'ID=' + IntToStr(VL_ID);
        VL_TLoja.ExecSQL;

        VL_Mensagem.Limpar;
        VL_Mensagem.AddComando('0067', '');
        VL_Mensagem.AddTag('0036', VL_ID);
        DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);

    finally
        DNucleo.ZConexao.Commit;
        F.GravaLog(TTConexao(VP_AContext.Data).ClienteIp, laExcluir, VP_Mensagem);
        VL_Mensagem.Free;
        VL_TLoja.Free;
    end;

end;
function TDNucleo.comando006A(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_TPinPad: TZQuery;
    VL_Permissao: string;
    VL_Tag: ansistring;
    VL_ID: int64;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_TPinPad := TZQuery.Create(DComunicador);
    VL_TPinPad.Connection := DNucleo.ZConexao;
    VL_Permissao := 'U';
    VL_Tag := '';
    VL_ID := 0;
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica parametros
        VP_Mensagem.GetTag('003D', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_ID := StrToInt(VL_Tag);
        if VL_ID = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '47');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica permissao
        VP_Mensagem.GetTag('0037', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_Permissao := VL_Tag;
        if VL_Permissao = 'U' then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '45');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica se existe o id pra exclusão
        VL_TPinPad.Close;
        VL_TPinPad.SQL.Text := 'SELECT * FROM PINPAD WHERE ID=' + IntToStr(VL_ID);
        VL_TPinPad.Open;

        if VL_TPinPad.RecordCount = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '48');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //exclui PINPAD
        VL_TPinPad.Close;
        VL_TPinPad.SQL.Text := 'DELETE FROM PINPAD WHERE ' + 'ID=' + IntToStr(VL_ID);
        VL_TPinPad.ExecSQL;

        //ATUALIZA PDV
         //atualiza loja
        VL_TPinPad.Close;
        VL_TPinPad.SQL.Text := 'UPDATE PDV SET PINPAD_ID=NULL WHERE PINPAD_ID=' + IntToStr(VL_ID);
        VL_TPinPad.ExecSQL;

        VL_Mensagem.Limpar;
        VL_Mensagem.AddComando('0067', '');
        VL_Mensagem.AddTag('0036', VL_ID);
        DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);

    finally
        DNucleo.ZConexao.Commit;
        F.GravaLog(TTConexao(VP_AContext.Data).ClienteIp, laExcluir, VP_Mensagem);
        VL_Mensagem.Free;
        VL_TPinPad.Free;
    end;

end;
function TDNucleo.comando006B(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
var
    VL_Mensagem: TMensagem;
    VL_TPinPad: TZQuery;
    VL_Permissao: string;
    VL_Tag: ansistring;
    VL_ID: int64;
begin
    Result := 0;
    VL_Mensagem := TMensagem.Create;
    VL_TPinPad := TZQuery.Create(DComunicador);
    VL_TPinPad.Connection := DNucleo.ZConexao;
    VL_Permissao := 'U';
    VL_Tag := '';
    VL_ID := 0;
    try
        if TTConexao(VP_AContext.Data).Status <> csLogado then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '35');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica parametros
        VP_Mensagem.GetTag('003D', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_ID := StrToInt(VL_Tag);
        if VL_ID = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '47');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica permissao
        VP_Mensagem.GetTag('0037', VL_Tag);
        if Length(VL_Tag) = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '28');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        VL_Permissao := VL_Tag;
        if VL_Permissao = 'U' then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '45');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //verifica se existe o id pra exclusão
        VL_TPinPad.Close;
        VL_TPinPad.SQL.Text := 'SELECT * FROM PDV WHERE ID=' + IntToStr(VL_ID);
        VL_TPinPad.Open;

        if VL_TPinPad.RecordCount = 0 then
        begin
            VL_Mensagem.Limpar;
            VL_Mensagem.AddComando('0026', '48');
            DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);
            Exit;
        end;
        //exclui PDV
        VL_TPinPad.Close;
        VL_TPinPad.SQL.Text := 'DELETE FROM PDV WHERE ' + 'ID=' + IntToStr(VL_ID);
        VL_TPinPad.ExecSQL;

        VL_Mensagem.Limpar;
        VL_Mensagem.AddComando('0067', '');
        VL_Mensagem.AddTag('0036', VL_ID);
        DComunicador.EnviarCliente(VL_Mensagem, VP_AContext);

    finally
        DNucleo.ZConexao.Commit;
        F.GravaLog(TTConexao(VP_AContext.Data).ClienteIp, laExcluir, VP_Mensagem);
        VL_Mensagem.Free;
        VL_TPinPad.Free;
    end;


end;
function TDNucleo.comando006C(VP_Mensagem: TMensagem; VP_AContext: TIdContext): integer;
begin

end;

{$R *.lfm}

end.
